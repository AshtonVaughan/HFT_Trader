version: '3.8'

services:
  # HFT Trading API
  hft_api:
    build: .
    container_name: hft_trader_api
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./processed_data:/app/processed_data
      - ./logs:/app/logs
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONUNBUFFERED=1
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: hft_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL for trade history
  postgres:
    image: postgres:15-alpine
    container_name: hft_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=hft_trader
      - POSTGRES_USER=hft_user
      - POSTGRES_PASSWORD=hft_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  # TimescaleDB for time-series data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: hft_timescale
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=market_data
      - POSTGRES_USER=hft_user
      - POSTGRES_PASSWORD=hft_password
    volumes:
      - timescale_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: hft_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: hft_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped

  # Model training worker (optional, run manually)
  training_worker:
    build: .
    container_name: hft_training_worker
    command: python train_enhanced.py
    volumes:
      - ./models:/app/models
      - ./processed_data:/app/processed_data
      - ./logs:/app/logs
      - ./runs:/app/runs
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONUNBUFFERED=1
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - training

volumes:
  redis_data:
  postgres_data:
  timescale_data:
  grafana_data:
  prometheus_data:

networks:
  default:
    name: hft_network
